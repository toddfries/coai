#!/usr/bin/perl

# Copyright (c) 2022 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Config::Tiny;
use Data::Dumper;
use Getopt::Std;
use OpenAI::API;
use Time::HiRes qw(gettimeofday tv_interval);
use Encode;
use open qw(:std :utf8);

our $opt_c; # config
our $opt_m; # model
our $opt_p; # prolog i.e. file to read in and send at the top of each query
our $opt_o; # one pass
our $opt_t; # temperature

# defaults
$opt_c = $ENV{'HOME'}."/.config/coai/key.conf";
$opt_m = 'text-davinci-003',
$opt_t = 0.5;

getopts('c:m:op:');

if (! -f $opt_c) {
	die "Can't open ${opt_c} to read in the key";
}

my $cobj = Config::Tiny->new();

my $config = $cobj->read($opt_c);
my $key = $config->{_}->{key};

my $openai = OpenAI::API->new( api_key => $key );

my $prolog;
if (defined($opt_p)) {
	open(P,$opt_p);
	my $line;
	while(<P>) {
		chomp($line = $_);
		$prolog .= $line."\n";
	}
	close(P);
}

my $prompt = "Query? (type 'done.' to end)\n";

my $l;
my $query = "";
print $prompt;
while(<STDIN>) {
	chomp($l = $_);
	if (! ($l =~ /^done.$/)) {
		$query .= $l."\n";
		next;
	}

	#print "Query: ".$query;
	if (defined($prolog)) {
		$query = "\n".$prolog."\n".$query;;
	}
	
	print "Sending...";

	my $start = [gettimeofday];
	my $response;
	eval {
	    $response = $openai->completions(
		model => $opt_m,
		prompt => $query,
		max_tokens => 2048,
		temperature => $opt_t,
		top_p => 1,
		frequency_penalty => 0,
		presence_penalty => 0
		# XXX context => "$query\n$response\n", ?
		# user => "uid"
	    );
	};
	my ($sec, $us) = tv_interval( $start, [gettimeofday]);
	if (!defined($us)) {
		$us = 0.0;
	}
	if (!defined($sec)) {
		$sec = 0.0;
	}
	my $elapsed = $sec * 1.0 + $us * 0.000001;
	printf "real %0.8fs\n", $elapsed;
	
	if ($@) {
		print "\nWARNING: $@\n\n";
		if (defined($opt_o)) {
			last;
		}
		print $prompt;
		next;
	}
	# reset
	$query = "";


	print "Response(s):\n";
	if (defined(@{$response->{'choices'}}[0])) {
		foreach my $choice (@{$response->{'choices'}}) {
			printf "%2d. ", $choice->{index};
			printf "%s\n\n", word_wrap($choice->{text});
			printf "     finish = %s\n", $choice->{'finish_reason'};
		}
		print "Stats: ";
		print $response->{'created'};
		printf " tot/prompt/compl tokens = %d/%d/%d\n",
			$response->{'usage'}->{'total_tokens'},
			$response->{'usage'}->{'prompt_tokens'},
			$response->{'usage'}->{'completion_tokens'},
		#print Dumper($response);
	} else {
		print Dumper($response);
	}
	print "\n";
	if (defined($opt_o)) {
		last;
	}
	print $prompt;
}

sub word_wrap {
	my ($text) = @_;

	#printf "\nword_wrap input text --> %s <--\n", $text;

	my $wraplen = 62;
	my $res = "";
	foreach my $line (split(/\n/,decode('utf8',$text))) {
		my $linelen = 0;
		# this will cause only lengthy paragraphs to be
		# split, code should come through undisturbed
		if (length($line) < $wraplen) {
			$res .= $line . "\n";
			next;
		}
		foreach my $word (split(/\s+/,$line)) {
			my $wlen = length($word);
			if ($linelen == 0) {
				$res .= " $word";
				$linelen += $wlen + 1;
				next;
			}
			if ( ($linelen + $wlen + 1) > $wraplen) {
				$res .= "\n";
				$linelen = 0;
			}
			$res .= " $word";
			$linelen += $wlen + 1;
		}
		$res .= "\n";
	}
	return $res;
}
