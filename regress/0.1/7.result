Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.1 .. real 27.58596000s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");
   for I in 1..100 loop
      Put(I);
   end loop;
end Hello_World;

Assembly:
section .data
msg db "Hello, World!", 0Ah

section .text
global _start

_start:
    mov eax, 4
    mov ebx, 1
    mov ecx, msg
    mov edx, 13
    int 80h

    mov eax, 1
    mov ebx, 0
    int 80h

loop:
    mov eax, 4
    mov ebx, 1
    mov ecx, [counter]
    mov edx, 1
    int 80h

    inc [counter]
    cmp [counter], 100
    jne loop

exit:
    mov eax, 1
    mov ebx, 0
    int 80h

section .bss
counter resb 1

BASIC:
10 PRINT "Hello, World!"
20 FOR I = 1 TO 100
30 PRINT I;
40 NEXT I

C:
#include <stdio.h>

int main()
{
    printf("Hello, World!\n");
    for (int i = 1; i <= 100; i++) {
        printf("%d", i);
    }
    return 0;
}

Erlang:
-module(hello_world).
-export([hello_world/0]).

hello_world() ->
    io:fwrite("Hello, World!\n"),
    count(1).

count(N) when N =< 100 ->
    io:fwrite(integer_to_list(N)),
    count(N + 1);
count(_) -> ok.

Go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i := 1; i <= 100; i++ {
        fmt.Print(i)
    }
}

Java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.print(i);
        }
    }
}

Javascript:
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i);
}

Python:
print("Hello, World!")
for i in range(1, 101):
    print(i, end="")

Ruby:
puts "Hello, World!"
1.upto(100) { |i| print i }

Perl:
print "Hello, World!\n";
for (my $i = 1; $i <= 100; $i++) {
    print $i;
}

PostScript:
/HelloWorld {
    (Hello, World!) print
    1 100 {
        dup
        ( ) print
    } for
} def
HelloWorld


     finish = stop
Stats: 1676419145 tot/prompt/compl tokens = 793/49/744

