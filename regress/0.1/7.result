Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.1 .. real 28.34679300s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");
   for I in 1..100 loop
      Put(I);
   end loop;
end Hello_World;

Assembly:
.data
msg:    .asciiz "Hello, World!\n"

.text
.globl main

main:
    li $v0, 4
    la $a0, msg
    syscall

    li $t0, 1
    li $t1, 100

loop:
    li $v0, 1
    move $a0, $t0
    syscall

    addi $t0, $t0, 1
    blt $t0, $t1, loop

BASIC:
10 PRINT "Hello, World!"
20 FOR I = 1 TO 100
30 PRINT I;
40 NEXT I

C:
#include <stdio.h>

int main() {
   printf("Hello, World!\n");
   for (int i = 1; i <= 100; i++) {
      printf("%d ", i);
   }
   return 0;
}

Erlang:
-module(hello_world).
-export([hello_world/0]).

hello_world() ->
    io:fwrite("Hello, World!\n"),
    loop(1, 100).

loop(I, Max) when I =< Max ->
    io:fwrite(I),
    loop(I + 1, Max);
loop(_, _) ->
    ok.

go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i := 1; i <= 100; i++ {
        fmt.Print(i, " ")
    }
}

java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.print(i + " ");
        }
    }
}

javascript:
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i);
}

python:
print("Hello, World!")
for i in range(1, 101):
    print(i, end=" ")

ruby:
puts "Hello, World!"
(1..100).each { |i| print i, " " }

perl:
print "Hello, World!\n";
for (my $i = 1; $i <= 100; $i++) {
    print $i, " ";
}

postscript:
/HelloWorld {
    (Hello, World!) print
    1 1 100 {
        exch dup print
        1 add
    } for
} def
HelloWorld


     finish = stop
Stats: 1678788272 tot/prompt/compl tokens = 758/49/709

