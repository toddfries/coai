Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.1 .. real 23.01209600s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");
   for I in 1..100 loop
      Put(Integer'Image(I) & " ");
   end loop;
   New_Line;
end Hello_World;

Assembly:
.data
msg: .asciz "Hello, World!"

.text
.global _start

_start:
    movl $4, %eax
    movl $1, %ebx
    movl $msg, %ecx
    movl $13, %edx
    int $0x80

    movl $1, %eax
    movl $1, %ebx
    movl $0, %ecx
    int $0x80

.loop:
    movl $4, %eax
    movl $1, %ebx
    movl $1, %ecx
    movl $1, %edx
    int $0x80

    inc %ecx
    cmp $100, %ecx
    jne .loop

BASIC:
10 PRINT "Hello, World!"
20 FOR I = 1 TO 100
30 PRINT I;
40 NEXT I

C:
#include <stdio.h>

int main()
{
    printf("Hello, World!\n");
    for (int i = 1; i <= 100; i++) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}

Erlang:
-module(hello_world).
-export([hello_world/0]).

hello_world() ->
    io:fwrite("Hello, World!~n"),
  lists:foreach(fun(I) -> io:fwrite("~p ",[I]) end,
 lists:seq(1,100)),
    io:fwrite("~n").

Go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i := 1; i <= 100; i++ {
        fmt.Printf("%d ", i)
    }
    fmt.Println()
}

Java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
    }
}

Javascript:
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i + " ");
}

Python:
print("Hello, World!")
for i in range(1, 101):
    print(i, end=" ")
print()

Ruby:
puts "Hello, World!"
(1..100).each { |i| print "#{i} " }
puts

Rust:
fn main() {
    println!("Hello, World!");
    for i in 1..100 {
        print!("{} ", i);
    }
    println!();
}

Perl:
print "Hello, World!\n";
for (my $i = 1; $i <= 100; $i++) {
    print "$i ";
}
print "\n";

PostScript:
/HelloWorld {
    (Hello, World!) print
    1 1 100 {
        dup
        ( ) print
        1 add
    } for
    ( ) print
    newline
} def
HelloWorld


     finish = stop
Stats: 1679348891 tot/prompt/compl tokens = 927/51/876

