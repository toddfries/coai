Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.9 .. real 25.51653600s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_Count is
   begin
      Put_Line("Hello, World");
      for I in 1..100 loop
         Put(Integer'Image(I) & " ");
      end loop;
   end Hello_Count;

Assembly:
.data
helloMsg: .ascii "Hello, World\n"

.text
.global _start
_start :
  movl $4, %eax     # write syscall
  movl $1, %ebx     # stdout
  movl $helloMsg, %ecx
  movl $13, %edx    # length of string
  int $0x80

# Print out numbers 1-100
movl $1, %eax      # write syscall
movl $1, %ebx      # stdout
movl $100, %edx    # outer loop counter

start_loop1:
  movl $48, %ecx     # ASCII 0
  movl $48, %eax     
  movl $1, %ebx      

start_loop2:
  int $0x80
  addl $1, %ecx
  cmpl %ecx, %eax
  jl start_loop2

  addl $1, %eax         
  cmpl %eax, %edx       
  jle start_loop1

  movl $1, %eax
  movl $0, %ebx
  int $0x80

BASIC:
10 PRINT "Hello, World"
20 FOR I = 1 TO 100
30 PRINT I;
40 NEXT I

C:
#include<stdio.h>

int main()
{
   printf("Hello, World\n");
   for (int i = 1; i <= 100; i++)
   {
      printf("%d ", i);
   }
   return 0;
}

Erlang:
-module(hello_count).
-export([main/0]).

main() ->
 io:fwrite("Hello, World~n"),
  lists:foreach(fun(N) -> io:fwrite(integer_to_list(N) ++ " ")
 end, lists:seq(1,100)).

Go:
package main 
import "fmt"

func main() {
    fmt.Println("Hello, World")

    for i := 1; i <= 100; i++ {
        fmt.Printf("%d ", i)
    }

}

Java:
public class HelloCount {
   public static void main(String[] args) {
      System.out.println("Hello, World");
      for(int i = 1; i <= 100; i++)
         System.out.print(i + " ");
   }
}

Javascript:
console.log('Hello, World');
for (let i = 1; i <= 100; i++) {
    console.log(i);
}

Python:
print('Hello, World')
for i in range(1, 101):
   print(i, end=' ')

Ruby:
puts "Hello, World"
1.upto(100) { |i| print "#{i} " }

Perl:
print "Hello, World\n";
for (my $i = 1; $i <= 100; ++$i) {
    print "$i ";
}

PostScript:
/Hello_Count {
  (% Hello, World) ==
  0 1 100 {1 add} for
  0 1 100 {dup ( ) ==} for
} def
Hello_Count


     finish = stop
Stats: 1677796610 tot/prompt/compl tokens = 920/49/871

