Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.9 .. real 28.60641700s
Response(s):
Choice# 0:

-- Ada --
with Ada.Text_IO;
use Ada.Text_IO;

procedure Count_to_Hundred is
    count : Integer := 0;
begin
    Put_Line("Hello, World!");

    while count <= 100 loop
        Put(Integer'Image(count) & " ");
        count := count + 1;
    end loop;

    New_Line;
end Count_to_Hundred;

-- Assembly --
.data
msg: .ascii "Hello, World!\n"

.text
.global _start

_start:

    # print "Hello, World!" message
    movq $1, %rax # 1 is write system call
    movq $1, %rdi # 1 is stdout
    movq $msg, %rsi # address of msg
    movq $14, %rdx # length of msg
    syscall

    # Count to 100
    movq $1, %rax # 1 is write system call
    movq $1, %rdi # 1 is stdout
    mov $1, %rsi # address of number buffer
    movq $2, %rdx # length of number buffer
    loop:
        add $1, %rsi # increment number
        sub $1, %rdx # decrement lenght
        cmp $100, %rsi # is it 100?
        jle loop # if not, continue
        syscall # if yes, exit
    movq $60, %rax # 60 is exit system call
    xor %rdi, %rdi
    syscall

-- BASIC --
10 PRINT "Hello, World!"
20 FOR i = 0 TO 100
30    PRINT i;
40 NEXT i

-- C --
#include <stdio.h>

int main()
{
    printf("Hello, World!\n");

    int count;
    for (count = 0; count <= 100; count++)
    {
        printf("%d ", count);
    }
    printf("\n");
    return 0;
}

-- Erlang --
-module(hello_world).
-export([count_to_hundred/0]).

count_to_hundred() ->
    io:format("Hello, World!~n"),
    count(0).

count(100) ->
    ok;
count(N) ->
    io:format("~w ", [N]),
    count(N+1).

-- Go --
package main

import "fmt"

func main() {

    fmt.Println("Hello, World!")

    for i := 0; i <= 100; i++ {
        fmt.Printf("%d ", i)
    }
    fmt.Println("")
}

-- Java --
public class HelloWorld {

    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 0; i <= 100; i++) {
            System.out.print(i + " ");
        }
        System.out.println("");
    }

}

-- JavaScript --
console.log("Hello, World!");
for (let i = 0; i <= 100; i++) {
    console.log(i + " ");
}

-- Python --
print("Hello, World!")

for i in range(0, 101):
    print(i, end=" ")
print("")

-- Ruby --
puts "Hello, World!"

(0..100).each do |n|
  print "#{n} "
end
puts ""

-- Rust --
fn main() {
    println!("Hello, World!");

    for i in 0..=100 {
        print!("{} ", i);
    }
    println!("");
}

-- Perl --
#!/usr/bin/env perl

print "Hello, World!\n";
foreach (0..100) {
    print "$_ ";
}

-- Postscript --
%!
(Hello, World!) print

/count 0 def
count 100 {
    ( ) print
    count 1 add
} for


     finish = stop
Stats: 1679348860 tot/prompt/compl tokens = 1040/51/989

