Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.9 .. real 52.70148100s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO; use Ada.Text_IO;

procedure HelloWorld is
    begin
    Put_Line("Hello, World");
    for I in 1..100 loop
        Put_Line(Integer'Image(I));
    end loop;
end HelloWorld;

Assembly:
section .data
    hello_message db 'Hello, World', 10

section .text
    global _start

_start:
    ; Print the string
    mov edx, 14
    mov ecx, hello_message
    mov ebx, 1
    mov eax, 4
    int 80h

    ; Count to 100
    mov ebx, 0
loop:
    inc ebx
    cmp ebx, 100
    jle loop 

    mov eax, 1
    int 80h

BASIC:
PRINT "Hello, World"
FOR I = 1 TO 100
    PRINT I
NEXT

C: 
#include <stdio.h>

int main()
{
    printf("Hello, World\n");
    for (int i = 1; i <= 100; i++)
    {
        printf("%d\n", i);
    }
    return 0;
}

Erlang:
-module(hello_world).
-export([hello_world/0]).

hello_world() ->
    io:fwrite("Hello, World~n"),
    count(1).

count(Num) ->
    io:fwrite("~p~n", [Num]),
    Num =:= 100
    and
    done()
    or
    count(Num + 1).

done() ->
    io:fwrite("Done~n").

go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World")
    for i := 1; i <= 100; i++ {
        fmt.Println(i)
    }
}

java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
        for (int i = 1; i <= 100; i++) {
            System.out.println(i);
        }
    }
}

javascript:
console.log("Hello, World");
for(let i = 1; i <= 100; i++){
    console.log(i);
}

python:
print("Hello, World")
for i in range(1,101):
    print(i)

ruby:
puts "Hello, World"
(1..100).each { |i| puts i }

perl:
print "Hello, World\n";
foreach $count (1..100) {
    print $count, "\n";
}

postscript: 
/hello_message (Hello, World) def
hello_message
1 1 100 {
    dup (   ) print
    1 add
} for


     finish = stop
Stats: 1676677557 tot/prompt/compl tokens = 748/49/699

