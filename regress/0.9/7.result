Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.9 .. real 52.51078200s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure HelloWorld is  
begin
   Put_Line ("Hello, World!"); 
   
   for I in 0..100 loop
      Put(Integer'Image(I) & " ");
   end loop;
   New_Line;
end HelloWorld;

Assembly:
        section .data
strHello: db 'Hello, World!', 0xA
count: dd 0

section .text
	global _start

_start:

  mov eax, 4            ; system call number (sys_write)
  mov ebx, 1            ; file descriptor (stdout)
  mov ecx, strHello     ; address of the string to output
  mov edx, 13           ; number of bytes
  int 0x80              ; call kernel
 
  mov ecx, count  ; set ecx to count
label:
  inc ecx            ; increment count
  cmp ecx, 100       ; compare count to 100
  jle label ; jump to label if count is less than or equal to
 100
 
  mov eax,1          ; system_call number (sys_exit)
  xor ebx,ebx        ; exit code 0
  int 0x80           ; call kernel

BASIC:
10 PRINT "Hello, World!"
20 FOR I=1 TO 100
30 PRINT I;
40 NEXT I
50 END

C:
#include <stdio.h>

int main() {
  printf("Hello, World!\n");
  for(int i = 0; i <= 100; i++) {
    printf("%d ", i);
  }
  printf("\n");
  return 0;
}

Erlang:
-module(helloworld).
-export([start/0]).

start() ->
  io:fwrite("Hello, World!\n"),
  loop(0).

loop(100) -> done;
loop(I) ->
   io:fwrite(integer_to_list(I) ++ " "),
   loop(I+1).

go:
package main

import "fmt"

func main() {
	fmt.Println("Hello, World!")
	
	for i := 0; i <= 100; i++ {
		fmt.Printf("%v ", i)
	}
}

Java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 0; i <= 100; i++) {
            System.out.print(i + " ");
        }
    }
}

JavaScript:
console.log("Hello, World!");
for (var i = 0; i <= 100; i++) {
    console.log(i);
}

Python:
print("Hello, World!")
for i in range(101):
    print(i, end=" ")

Ruby:
puts "Hello, World!"
(0..100).each do |i|
    print "#{i} "
end

Perl:
#!/usr/bin/perl 

use strict;
use warnings;
 
print "Hello, World!\n";
 
foreach my $number (0..100) {
    print "$number ";
}

Postscript:
/str 256 string def
(Hello, World!) dup 0 4 index put
/cnt 0 def

{2 {cnt 1 add str cvs show ( ) show
    cnt 100 le {exit} if} repeat} loop


     finish = stop
Stats: 1677055788 tot/prompt/compl tokens = 907/49/858

