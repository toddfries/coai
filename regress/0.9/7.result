Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.9 .. real 46.12864800s
Response(s):
Choice# 0:

## Ada
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");

   for I in 1 .. 100 loop
      Put(I'Img & " ");
   end loop;
   Put_Line("");
end Hello_World;

## Assembly
.global _start
 
_start:
    mov     r0, #1          @ stdout
    mov     r1, #0          @ string address
    mov     r2, #12         @ string length
    mov     r7, #4          @ write syscall number
    svc     0               @ invoke syscall
    .ascii  "Hello, World\n"
    .data
loop:
    .word   0x02030002      @ mov r2, #1
    .word   0xe3a00001      @ mov r0, #1
    .word   0xe58f1004      @ str r1, [r15, #4]
    .word   0xeb000000      @ bl printf
    .word   0xe28f1004      @ add r1, r15, #4 
    .word   0xe351000a      @ cmp r1, #10
    .word   0x1afffffb      @ bne loop
    .word   0xe12fff1e      @ bx lr

## BASIC
PRINT "Hello, World!"
FOR I = 1 TO 100
    PRINT I;
NEXT I

## C
#include <stdio.h>

int main()
{ 
    printf("Hello, World!\n"); 

    for (int i=1; i<=100; i++)
        printf("%d ", i);
    printf("\n");
    return 0;
}

## Erlang

io:format("Hello, World!~n"),
 for(I = 1, I =< 100, I ++) -> io:format("~p ", [I]); true
 end.

## go
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i:=1; i<=100; i++ {
        fmt.Printf("%d ", i)
    }
}

## Java 
public class HelloWorld {

    public static void main(String[] args) {
        System.out.println("Hello, World!");

        for (int i =1; i<=100; i++) {
            System.out.print(i + " ");
        }
    }
}

## JavaScript
console.log("Hello, World!");

for (let i=1;i<=100;i++) {
    console.log(i);
}

## Python
print("Hello, World!")
for i in range(1, 101):
    print(i, end=' ')

## Ruby
puts "Hello, World!"

1.upto(100) { |i|
    print "#{i} "
}

## Rust
fn main() {
    println!("Hello, World!");

    for i in 1..101 {
        print!("{} ", i);
    }
}

## Perl
#!/usr/bin/perl

print "Hello, World!\n";

for( $i = 1; $i <= 100; $i++ ) {
    print "$i ";
} 

print "\n";

## PostScript
/printHelloWorld {
    (Hello, World!) print
    0 1 100 {
        exch print
    } for
    cr
} def
printHelloWorld


     finish = stop
Stats: 1678788768 tot/prompt/compl tokens = 924/51/873

