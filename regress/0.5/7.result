Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.5 .. real 24.25715000s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line ("Hello, World");
   for I in 1..100 loop
      Put_Line (Integer'Image (I));
   end loop;
end Hello_World;

Assembly:
.data
msg:  .ascii "Hello, World\n"

.text
.global main

main:
    mov $1, %rax
    mov $1, %rdi
    mov $msg, %rsi
    mov $13, %rdx
    syscall

    mov $1, %rax
    xor %rdi, %rdi
    mov $100, %rsi
loop:
    mov %rdi, %rax
    mov $1, %rdi
    mov $1, %rdx
    syscall

    inc %rdi
    cmp $100, %rdi
    jle loop
    mov $60, %rax
    xor %rdi, %rdi
    syscall

BASIC:
PRINT "Hello, World"
FOR I = 1 TO 100
    PRINT I
NEXT I

C:
#include <stdio.h>

int main(void) {
    printf("Hello, World\n");
    for (int i = 1; i <= 100; i++) {
        printf("%d\n", i);
    }
    return 0;
}

Erlang:
-module(hello_world).
-export([main/0]).

main() ->
    io:fwrite("Hello, World\n"),
    loop(1).

loop(N) ->
    if
        N > 100 -> ok;
        true -> io:fwrite(integer_to_list(N) ++ "\n"),
            loop(N+1)
    end.

go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World")
    for i := 1; i <= 100; i++ {
        fmt.Println(i)
    }
}

Java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
        for (int i = 1; i <= 100; i++) {
            System.out.println(i);
        }
    }
}

Javascript:
console.log("Hello, World");
for (let i = 1; i <= 100; i++) {
    console.log(i);
}

Python:
print("Hello, World")
for i in range(1, 101):
    print(i)

Ruby:
puts "Hello, World"
1.upto(100) { |n| puts n }

Rust:
fn main() {
    println!("Hello, World");
    for i in 1..100 {
        println!("{}", i);
    }
}

Perl:
print "Hello, World\n";
for (my $i = 1; $i <= 100; $i++) {
    print "$i\n";
}

PostScript:
(Hello, World) print
1 1 100 {
    dup print
    1 add
} for


     finish = stop
Stats: 1679348864 tot/prompt/compl tokens = 832/51/781

