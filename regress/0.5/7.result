Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.5 .. real 42.99701900s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World");
   for I in 1..100 loop
      Put(I);
   end loop;
end Hello_World;

Assembly:
.data
msg:    .ascii "Hello, World\n"

.text
.global _start

_start:
    mov $4, %eax
    mov $1, %ebx
    mov $msg, %ecx
    mov $13, %edx
    int $0x80

    mov $1, %eax
    mov $1, %ebx

loop:
    mov $4, %eax
    mov $1, %ebx
    mov $1, %ecx
    mov $1, %edx
    int $0x80
    inc %ebx
    cmp %ebx, $100
    jne loop

    mov $1, %eax
    mov $0, %ebx
    int $0x80

BASIC:
10 PRINT "Hello, World"
20 FOR I = 1 TO 100
30 PRINT I
40 NEXT I

C:
#include <stdio.h>

int main() 
{
    printf("Hello, World\n");
    for(int i = 1; i <= 100; i++) {
        printf("%d", i);
    }
    return 0;
}

Erlang:
-module(hello_world).
-export([hello/0]).

hello() ->
    io:fwrite("Hello, World~n"),
  lists:foreach(fun(X) -> io:fwrite("~p~n", [X]) end,
 lists:seq(1,100)).

go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World")
    for i := 1; i <= 100; i++ {
        fmt.Print(i)
    }
}

java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
        for (int i=1; i <= 100; i++) {
            System.out.print(i);
        }
    }
}

javascript:
console.log("Hello, World");
for (var i=1; i <= 100; i++) {
    console.log(i);
}

python:
print("Hello, World")
for i in range(1, 101):
    print(i)

ruby:
puts "Hello, World"
(1..100).each { |i| puts i }

perl:
print "Hello, World\n";
for (my $i = 1; $i <= 100; $i++) {
    print $i;
}

postscript:
/printHelloWorld {
    (Hello, World) print
    1 1 100 {
        dup
        ==
        {
            exit
        } if
        dup
        ( ) print
        1 add
    } for
} def

printHelloWorld


     finish = stop
Stats: 1676500556 tot/prompt/compl tokens = 800/49/751

