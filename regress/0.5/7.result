Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.5 .. real 30.81195100s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");
   for I in 1..100 loop
      Put(Integer'Image(I));
      Put_Line("");
   end loop;
end Hello_World;

Assembly:
.data
msg:
    .ascii "Hello, World!\n"

.text
.global _start

_start:
    mov $1, %rax
    mov $1, %rdi
    mov $msg, %rsi
    mov $14, %rdx
    syscall

    mov $1, %rax
    mov $1, %rdi
    mov $1, %rsi
    mov $100, %rcx
    mov $0, %rdx
loop:
    mov %rcx, %rdx
    mov $1, %rax
    syscall

    dec %rcx
    jnz loop

    mov $60, %rax
    xor %rdi, %rdi
    syscall

BASIC:
10 PRINT "Hello, World!"
20 FOR I = 1 TO 100
30 PRINT I
40 NEXT I

C:
#include <stdio.h>

int main() {
   printf("Hello, World!\n");
   for (int i = 1; i <= 100; i++) {
      printf("%d\n", i);
   }
   return 0;
}

Erlang:
io:fwrite("Hello, World!\n").

loop(1, 100).

loop(N, Max) ->
    io:fwrite("~p~n", [N]),
    N < Max
    andalso loop(N+1, Max);
loop(_, _) -> ok.

go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i := 1; i <= 100; i++ {
        fmt.Println(i)
    }
}

Java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.println(i);
        }
    }
}

Javascript:
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i);
}

Python:
print("Hello, World!")
for i in range(1, 101):
    print(i)

Ruby:
puts "Hello, World!"
1.upto(100) do |i|
  puts i
end

Perl:
print "Hello, World!\n";
for (my $i = 1; $i <= 100; $i++) {
    print "$i\n";
}

PostScript:
/HelloWorld {
    (Hello, World!) print
    1 1 100 {
        dup print
        1 add
    } for
} def
HelloWorld


     finish = stop
Stats: 1676677563 tot/prompt/compl tokens = 798/49/749

