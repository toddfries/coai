Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.5 .. real 33.73263300s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
  Put_Line("Hello, World!");
  for I in 1..100 loop
    Put(I'Image & " ");
  end loop;
end Hello_World;

Assembly:
section .data
    msg db "Hello, World!", 0
section .text
    global _start

_start:
    mov eax, 4
    mov ebx, 1
    mov ecx, msg
    mov edx, 13
    int 0x80

    mov eax, 1
    mov ebx, 0

loop:
    mov edx, 0
    mov ecx, [counter]
    mov ebx, 1
    mov eax, 4
    int 0x80

    inc dword [counter]
    cmp dword [counter], 100
    jl loop

exit:
    mov eax, 1
    mov ebx, 0
    int 0x80

section .bss
    counter resd 1

BASIC:
PRINT "Hello, World!"
FOR I = 1 TO 100
    PRINT I;
NEXT I

C:
#include <stdio.h>

int main()
{
    printf("Hello, World!\n");
    for (int i = 1; i <= 100; i++)
        printf("%d ", i);
    return 0;
}

Erlang:
-module(hello).
-export([hello_world/0]).

hello_world() ->
    io:fwrite("Hello, World!~n"),
    count(1).

count(X) when X =< 100 ->
    io:fwrite("~p ",[X]),
    count(X + 1);
count(_) -> ok.

go:
package main

import "fmt"

func main() {
	fmt.Println("Hello, World!")
	for i := 1; i <= 100; i++ {
		fmt.Printf("%d ", i)
	}
}

java:
public class HelloWorld {

    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.print(i + " ");
        }
    }
}

javascript:
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i);
}

python:
print("Hello, World!")
for i in range(1, 101):
    print(i, end=" ")

ruby:
puts "Hello, World!"
(1..100).each { |i| print "#{i} " }

perl:
print "Hello, World!\n";
for (my $i = 1; $i <= 100; $i++) {
    print "$i ";
}

postscript:
/Hello, World! {
    (Hello, World!) print
} def

/count {
    0 1 100 {
        dup
        print
        1 add
    } for
} def

Hello, World!
count


     finish = stop
Stats: 1676914783 tot/prompt/compl tokens = 822/49/773

