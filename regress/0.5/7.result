Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.5 .. real 53.38144300s
Response(s):
Choice# 0:

// Ada
with Ada.Text_IO; use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");
   for I in 1..100 loop
      Put(Integer'Image(I) & " ");
   end loop;
   New_Line;
end Hello_World;

// Assembly
.data
msg: .ascii "Hello, World!"

.text
.global _start

_start:
    mov $1, %rax
    mov $1, %rdi
    mov $msg, %rsi
    mov $13, %rdx
    syscall

    mov $1, %rax
    mov $1, %rdi
    mov $1, %rsi
    mov $100, %rdx
    syscall

// BASIC
10 PRINT "Hello, World!"
20 FOR I = 1 TO 100
30 PRINT I;
40 NEXT I

// C
#include <stdio.h>

int main()
{
    printf("Hello, World!\n");
    for (int i = 1; i <= 100; i++) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}

// Erlang
-module(hello_world).
-export([hello_world/0]).

hello_world() ->
    io:format("Hello, World!~n"),
    count(1).

count(N) when N > 100 ->
    ok;
count(N) ->
    io:format("~p ", [N]),
    count(N+1).

// Go
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i := 1; i <= 100; i++ {
        fmt.Print(i, " ")
    }
    fmt.Println()
}

// Java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
    }
}

// JavaScript
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i + " ");
}

// Python
print("Hello, World!")
for i in range(1, 101):
    print(i, end=" ")
print()

// Ruby
puts "Hello, World!"
1.upto(100) { |i| print "#{i} " }
puts

// Perl
print "Hello, World!\n";
for (my $i = 1; $i <= 100; $i++) {
    print "$i ";
}
print "\n";

// PostScript
/HelloWorld {
    (Hello, World!) print
    1 1 100 {
        dup print
        1 add
    } for
    print
} def

HelloWorld


     finish = stop
Stats: 1676486156 tot/prompt/compl tokens = 789/49/740

