Query? (type 'done.' to end)
Requesting... model/temp = text-davinci-003/0.5 .. real 47.63737000s
Response(s):
Choice# 0:

Ada:
with Ada.Text_IO;
use Ada.Text_IO;

procedure Hello_World is
begin
   Put_Line("Hello, World!");
   for I in 1..100 loop
      Put(I'Image);
   end loop;
end Hello_World;

Assembly:
section .text
   global _start

_start:
   ; Print "Hello, World!"
   mov edx, 13
   mov ecx, msg
   mov ebx, 1
   mov eax, 4
   int 0x80

   ; Count to 100
   mov edx, 2
   mov ecx, count
   mov ebx, 1
   mov eax, 4
   int 0x80

exit:
   ; Exit
   mov eax, 1
   int 0x80

section .data
msg db 'Hello, World!', 0xA
 count db '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
 100', 0xA

BASIC:
10 PRINT "Hello, World!"
20 FOR I = 1 TO 100
30 PRINT I;
40 NEXT I

C:
#include <stdio.h>

int main(void) {
   printf("Hello, World!\n");
   for (int i = 1; i <= 100; i++) {
      printf("%d ", i);
   }
   printf("\n");
   return 0;
}

Erlang:
-module(hello_world).
-export([main/0]).

main() ->
    io:fwrite("Hello, World!~n"),
    count(1).

count(X) when X =< 100 ->
    io:fwrite("~w ",[X]),
    count(X+1);
count(X) -> ok.

go:
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
    for i := 1; i <= 100; i++ {
        fmt.Print(i, " ")
    }
    fmt.Println()
}

java:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
        for (int i = 1; i <= 100; i++) {
            System.out.print(i + " ");
        }
    }
}

javascript:
console.log("Hello, World!");
for (let i = 1; i <= 100; i++) {
    console.log(i + " ");
}

python:
print("Hello, World!")
for i in range(1, 101):
    print(i, end=" ")

ruby:
puts "Hello, World!"
(1..100).each { |i| print "#{i} " }

perl:
print "Hello, World!\n";
for (my $i=1; $i<=100; $i++) {
    print "$i ";
}

postscript:
/msg (Hello, World!) def
 /countstring (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79
 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99
 100) def

msg
show

0 1 100 {
    countstring exch get show
    dup 0 eq { exit } if
} for


     finish = stop
Stats: 1676646842 tot/prompt/compl tokens = 999/49/950

